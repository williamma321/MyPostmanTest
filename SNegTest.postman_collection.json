{
	"info": {
		"_postman_id": "4bd4a72e-4580-48aa-9ae6-eee3ce74771f",
		"name": "Sema4 Negative Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Session ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7f2489fa-d3db-4604-a689-43311342a864",
						"exec": [
							"let newSessionID = pm.response.json();",
							"",
							"pm.environment.set(\"CurrentSessionID\", newSessionID);",
							"",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Returns 15 char alhpanumeric id\", function () {",
							"",
							"    pm.expect(newSessionID).to.match(/^[-a-z0-9]{36}$/);",
							"    ",
							"});",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "055ab366-974d-4017-8236-63242c9b1324",
						"exec": [
							"pm.environment.set(\"UserName\", \"librarian\");",
							"pm.environment.set(\"Password\", \"librarian\");",
							"pm.environment.set(\"ExpiredSessionID\", \"12f91882-575b-4843-8a2f-7a35836ba3be\");",
							"pm.environment.set(\"BadAuthorID\", \"12\");",
							"pm.environment.set(\"BadAuthorIDStg\", \"abc\");",
							"",
							"pm.environment.set(\"BadSessionID\", \"1234f\");",
							"pm.environment.set(\"EmptySessionErrMsg\", \"You need to pass a session_id with this request\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{Password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{UserName}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/session?",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"session"
					],
					"query": [
						{
							"key": "callback",
							"value": "JSON",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetAuthor",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7f2489fa-d3db-4604-a689-43311342a864",
						"exec": [
							"var AuthorListSchema = {",
							"    \"Author\": ",
							"      {",
							"          \"Age\" : \"number\",",
							"          \"Id\"  : \"number\",",
							"          \"Name\": \"string\",",
							"      }",
							"      ",
							"};",
							"",
							"let AuthorDetailInfo =[];",
							"",
							"let ListofAuthorResp = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(ListofAuthorResp, AuthorListSchema)).to.be.true;",
							"",
							"});",
							"",
							"pm.test('Get Authors into the environment vars Array', function() {",
							"",
							"for(let i=0; i<ListofAuthorResp.length; i++) {",
							"",
							"  var Authors = ListofAuthorResp[i];",
							"  AuthorDetailInfo.push({",
							"      \"Age\": Authors.Age,",
							"      \"Id\" : Authors.Id,",
							"      \"Name\" : Authors.Name",
							"  });",
							"}",
							"",
							"  pm.environment.set(\"AuthorDetailArray\",AuthorDetailInfo );",
							"  pm.environment.set(\"MaxAuthor\",(ListofAuthorResp.length-1) );",
							"      ",
							"    ",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "librarian",
							"type": "string"
						},
						{
							"key": "username",
							"value": "librarian",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/author?session_id={{CurrentSessionID}}",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"author"
					],
					"query": [
						{
							"key": "session_id",
							"value": "{{CurrentSessionID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Session ID Negative Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7f2489fa-d3db-4604-a689-43311342a864",
						"exec": [
							"",
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.badRequest;",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "679594da-9eb0-4bd8-b6ec-b871e0daf666",
						"exec": [
							"let bad_username = pm.iterationData.get(\"BadUserName\");",
							"console.log(\"Username that will be user for Bad user:\", bad_username);",
							"",
							"pm.environment.set(\"UserName\", bad_username);",
							"",
							"let bad_pwd = pm.iterationData.get(\"Badpwd\");",
							"console.log(\"Username that will be user for Bad user:\", bad_pwd);",
							"",
							"pm.environment.set(\"Password\", bad_pwd);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{Password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{UserName}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/session?",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"session"
					],
					"query": [
						{
							"key": "callback",
							"value": "JSON",
							"disabled": true
						}
					]
				},
				"description": "Test no Session ID issue when its wrong user name"
			},
			"response": []
		},
		{
			"name": "Get Session ID Negative Test 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7f2489fa-d3db-4604-a689-43311342a864",
						"exec": [
							"",
							"pm.test(\"Status code is 405\", function() {",
							"    pm.response.to.have.status(405);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.clientError;",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "679594da-9eb0-4bd8-b6ec-b871e0daf666",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "librarian",
							"type": "string"
						},
						{
							"key": "username",
							"value": "librarian",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/session?",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"session"
					],
					"query": [
						{
							"key": "callback",
							"value": "JSON",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Session ID Negative Test 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7f2489fa-d3db-4604-a689-43311342a864",
						"exec": [
							"",
							"pm.test(\"Status code is 405\", function() {",
							"    pm.response.to.have.status(405);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.clientError;",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "679594da-9eb0-4bd8-b6ec-b871e0daf666",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "librarian",
							"type": "string"
						},
						{
							"key": "username",
							"value": "librarian",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/session?",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"session"
					],
					"query": [
						{
							"key": "callback",
							"value": "JSON",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Session ID Negative Test 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7f2489fa-d3db-4604-a689-43311342a864",
						"exec": [
							"",
							"pm.test(\"Status code is 405\", function() {",
							"    pm.response.to.have.status(405);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.clientError;",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "679594da-9eb0-4bd8-b6ec-b871e0daf666",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "librarian",
							"type": "string"
						},
						{
							"key": "username",
							"value": "librarian",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/session",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"session"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Session ID Negative Test 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7f2489fa-d3db-4604-a689-43311342a864",
						"exec": [
							"",
							"pm.test(\"Status code is 405\", function() {",
							"    pm.response.to.have.status(405);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.clientError;",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "679594da-9eb0-4bd8-b6ec-b871e0daf666",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "librarian",
							"type": "string"
						},
						{
							"key": "username",
							"value": "librarian",
							"type": "string"
						}
					]
				},
				"method": "HEAD",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/session",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"session"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Session ID Negative Test 6",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7f2489fa-d3db-4604-a689-43311342a864",
						"exec": [
							"",
							"pm.test(\"Status code is 405\", function() {",
							"    pm.response.to.have.status(405);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.clientError;",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "679594da-9eb0-4bd8-b6ec-b871e0daf666",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "librarian",
							"type": "string"
						},
						{
							"key": "username",
							"value": "librarian",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/session",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"session"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Session ID Negative Test 7",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7f2489fa-d3db-4604-a689-43311342a864",
						"exec": [
							"",
							"pm.test(\"Status code is 405\", function() {",
							"    pm.response.to.have.status(405);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.clientError;",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "679594da-9eb0-4bd8-b6ec-b871e0daf666",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "librarian",
							"type": "string"
						},
						{
							"key": "username",
							"value": "librarian",
							"type": "string"
						}
					]
				},
				"method": "OPTIONS",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/session",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"session"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Session ID Negative Test 8",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7f2489fa-d3db-4604-a689-43311342a864",
						"exec": [
							"",
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.badRequest;",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "679594da-9eb0-4bd8-b6ec-b871e0daf666",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "Admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "Admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/session",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"session"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Author by ID Negative Test",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "03b1264f-2b54-477c-8fa3-1e9a347b3276",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "407d775f-9332-48b8-a05a-69dcb66d0e3d",
						"exec": [
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.ok;",
							"//    pm.response.to.be.json;",
							"});",
							"",
							"",
							"/// Seems like this is a bug, since there should be error because the AuthorID is not found:",
							"/*",
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.badRequest;",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"*/",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "librarian",
							"type": "string"
						},
						{
							"key": "username",
							"value": "librarian",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/author/{{BadAuthorID}}?session_id={{BadSessionID}}",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"author",
						"{{BadAuthorID}}"
					],
					"query": [
						{
							"key": "session_id",
							"value": "{{BadSessionID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Author by ID Negative Test 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "03b1264f-2b54-477c-8fa3-1e9a347b3276",
						"exec": [
							"let thisAuthorID =  pm.iterationData.get(\"TestID\");",
							"",
							"console.log(\"thisAuthorID 1  is :\", thisAuthorID);",
							"",
							"let MaxAuthor = pm.environment.get(\"MaxAuthor\");",
							"",
							"    if (thisAuthorID > MaxAuthor)",
							"    {",
							"        thisAuthorID = MaxAuthor;",
							"    }",
							"    ",
							"",
							"console.log(\"thisAuthorID is :\", thisAuthorID);",
							"",
							"    let Cur_AuthorArray = pm.environment.get(\"AuthorDetailArray\");",
							"    ",
							"   // console.log(\"Cur_AuthorArray is :\", JSON.stringify(Cur_AuthorArray));",
							"    ",
							"    let AuthorIDbeingSent = Cur_AuthorArray[thisAuthorID];",
							"",
							"    // console.log(\"AuthorIDbeingSent is :\", JSON.stringify(AuthorIDbeingSent));",
							"    ",
							"    pm.environment.set(\"AuthorIDBeingSentisNOW\",AuthorIDbeingSent.Id );",
							"",
							"    ",
							"    "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "407d775f-9332-48b8-a05a-69dcb66d0e3d",
						"exec": [
							"",
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.badRequest;",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/author/{{AuthorIDBeingSentisNOW}}?session_id={{ExpiredSessionID}}",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"author",
						"{{AuthorIDBeingSentisNOW}}"
					],
					"query": [
						{
							"key": "session_id",
							"value": "{{ExpiredSessionID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Author by ID Negative Test 3",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "03b1264f-2b54-477c-8fa3-1e9a347b3276",
						"exec": [
							"let thisAuthorID = pm.iterationData.get(\"TestID\");;",
							"",
							"console.log(\"thisAuthorID 1  is :\", thisAuthorID);",
							"",
							"let MaxAuthor = pm.environment.get(\"MaxAuthor\");",
							"",
							"    if (thisAuthorID > MaxAuthor)",
							"    {",
							"        thisAuthorID = MaxAuthor;",
							"    }",
							"    ",
							"",
							"console.log(\"thisAuthorID is :\", thisAuthorID);",
							"",
							"    let Cur_AuthorArray = pm.environment.get(\"AuthorDetailArray\");",
							"    ",
							"   // console.log(\"Cur_AuthorArray is :\", JSON.stringify(Cur_AuthorArray));",
							"    ",
							"    let AuthorIDbeingSent = Cur_AuthorArray[thisAuthorID];",
							"",
							"    // console.log(\"AuthorIDbeingSent is :\", JSON.stringify(AuthorIDbeingSent));",
							"    ",
							"    pm.environment.set(\"AuthorIDBeingSentisNOW\",AuthorIDbeingSent.Id );",
							"",
							"    ",
							"    "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "407d775f-9332-48b8-a05a-69dcb66d0e3d",
						"exec": [
							"",
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.badRequest;",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/author/{{BadAuthorID}}?session_id={{BadSessionID}}",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"author",
						"{{BadAuthorID}}"
					],
					"query": [
						{
							"key": "session_id",
							"value": "{{BadSessionID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Author by ID Negative Test 4",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "03b1264f-2b54-477c-8fa3-1e9a347b3276",
						"exec": [
							"let thisAuthorID =  pm.iterationData.get(\"TestID\");",
							"",
							"console.log(\"thisAuthorID 1  is :\", thisAuthorID);",
							"",
							"let MaxAuthor = pm.environment.get(\"MaxAuthor\");",
							"",
							"    if (thisAuthorID > MaxAuthor)",
							"    {",
							"        thisAuthorID = MaxAuthor;",
							"    }",
							"    ",
							"",
							"console.log(\"thisAuthorID is :\", thisAuthorID);",
							"",
							"    let Cur_AuthorArray = pm.environment.get(\"AuthorDetailArray\");",
							"    ",
							"   // console.log(\"Cur_AuthorArray is :\", JSON.stringify(Cur_AuthorArray));",
							"    ",
							"    let AuthorIDbeingSent = Cur_AuthorArray[thisAuthorID];",
							"",
							"    // console.log(\"AuthorIDbeingSent is :\", JSON.stringify(AuthorIDbeingSent));",
							"    ",
							"    pm.environment.set(\"AuthorIDBeingSentisNOW\",AuthorIDbeingSent.Id );",
							"",
							"    ",
							"    "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "407d775f-9332-48b8-a05a-69dcb66d0e3d",
						"exec": [
							"",
							"pm.test(\"Status code is 405\", function() {",
							"    pm.response.to.have.status(405);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.clientError;",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "librarian",
							"type": "string"
						},
						{
							"key": "username",
							"value": "librarian",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://www.libraryinformationsystem.org/Services/RestService.svc/author/{{AuthorIDBeingSentisNOW}}?session_id={{CurrentSessionID}}",
					"protocol": "https",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"author",
						"{{AuthorIDBeingSentisNOW}}"
					],
					"query": [
						{
							"key": "session_id",
							"value": "{{CurrentSessionID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Author by ID Negative Test 5",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "03b1264f-2b54-477c-8fa3-1e9a347b3276",
						"exec": [
							"let thisAuthorID =   pm.iterationData.get(\"TestID\");",
							"",
							"console.log(\"thisAuthorID 1  is :\", thisAuthorID);",
							"",
							"let MaxAuthor = pm.environment.get(\"MaxAuthor\");",
							"",
							"    if (thisAuthorID > MaxAuthor)",
							"    {",
							"        thisAuthorID = MaxAuthor;",
							"    }",
							"    ",
							"",
							"console.log(\"thisAuthorID is :\", thisAuthorID);",
							"",
							"    let Cur_AuthorArray = pm.environment.get(\"AuthorDetailArray\");",
							"    ",
							"   // console.log(\"Cur_AuthorArray is :\", JSON.stringify(Cur_AuthorArray));",
							"    ",
							"    let AuthorIDbeingSent = Cur_AuthorArray[thisAuthorID];",
							"",
							"    // console.log(\"AuthorIDbeingSent is :\", JSON.stringify(AuthorIDbeingSent));",
							"    ",
							"    pm.environment.set(\"AuthorIDBeingSentisNOW\",AuthorIDbeingSent.Id );",
							"",
							"    ",
							"    "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "407d775f-9332-48b8-a05a-69dcb66d0e3d",
						"exec": [
							"",
							"pm.test(\"Status code is 405\", function() {",
							"    pm.response.to.have.status(405);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.clientError;",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "librarian",
							"type": "string"
						},
						{
							"key": "username",
							"value": "librarian",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/author/{{AuthorIDBeingSentisNOW}}?session_id={{CurrentSessionID}}",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"author",
						"{{AuthorIDBeingSentisNOW}}"
					],
					"query": [
						{
							"key": "session_id",
							"value": "{{CurrentSessionID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Author by ID Negative Test 6",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "03b1264f-2b54-477c-8fa3-1e9a347b3276",
						"exec": [
							"let thisAuthorID =  pm.iterationData.get(\"TestID\");",
							"",
							"console.log(\"thisAuthorID 1  is :\", thisAuthorID);",
							"",
							"let MaxAuthor = pm.environment.get(\"MaxAuthor\");",
							"",
							"    if (thisAuthorID > MaxAuthor)",
							"    {",
							"        thisAuthorID = MaxAuthor;",
							"    }",
							"    ",
							"",
							"console.log(\"thisAuthorID is :\", thisAuthorID);",
							"",
							"    let Cur_AuthorArray = pm.environment.get(\"AuthorDetailArray\");",
							"    ",
							"   // console.log(\"Cur_AuthorArray is :\", JSON.stringify(Cur_AuthorArray));",
							"    ",
							"    let AuthorIDbeingSent = Cur_AuthorArray[thisAuthorID];",
							"",
							"    // console.log(\"AuthorIDbeingSent is :\", JSON.stringify(AuthorIDbeingSent));",
							"    ",
							"    pm.environment.set(\"AuthorIDBeingSentisNOW\",AuthorIDbeingSent.Id );",
							"",
							"    ",
							"    "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "407d775f-9332-48b8-a05a-69dcb66d0e3d",
						"exec": [
							"",
							"pm.test(\"Status code is 405\", function() {",
							"    pm.response.to.have.status(405);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.clientError;",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "librarian",
							"type": "string"
						},
						{
							"key": "username",
							"value": "librarian",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/author/{{AuthorIDBeingSentisNOW}}?session_id={{CurrentSessionID}}",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"author",
						"{{AuthorIDBeingSentisNOW}}"
					],
					"query": [
						{
							"key": "session_id",
							"value": "{{CurrentSessionID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Author by ID Negative Test 7",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "03b1264f-2b54-477c-8fa3-1e9a347b3276",
						"exec": [
							"let thisAuthorID =  pm.iterationData.get(\"TestID\");",
							"",
							"console.log(\"thisAuthorID 1  is :\", thisAuthorID);",
							"",
							"let MaxAuthor = pm.environment.get(\"MaxAuthor\");",
							"",
							"    if (thisAuthorID > MaxAuthor)",
							"    {",
							"        thisAuthorID = MaxAuthor;",
							"    }",
							"    ",
							"",
							"console.log(\"thisAuthorID is :\", thisAuthorID);",
							"",
							"    let Cur_AuthorArray = pm.environment.get(\"AuthorDetailArray\");",
							"    ",
							"   // console.log(\"Cur_AuthorArray is :\", JSON.stringify(Cur_AuthorArray));",
							"    ",
							"    let AuthorIDbeingSent = Cur_AuthorArray[thisAuthorID];",
							"",
							"    // console.log(\"AuthorIDbeingSent is :\", JSON.stringify(AuthorIDbeingSent));",
							"    ",
							"    pm.environment.set(\"AuthorIDBeingSentisNOW\",AuthorIDbeingSent.Id );",
							"",
							"    ",
							"    "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "407d775f-9332-48b8-a05a-69dcb66d0e3d",
						"exec": [
							"",
							"pm.test(\"Status code is 405\", function() {",
							"    pm.response.to.have.status(405);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.clientError;",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "librarian",
							"type": "string"
						},
						{
							"key": "username",
							"value": "librarian",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/author/{{AuthorIDBeingSentisNOW}}?session_id={{CurrentSessionID}}",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"author",
						"{{AuthorIDBeingSentisNOW}}"
					],
					"query": [
						{
							"key": "session_id",
							"value": "{{CurrentSessionID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Author by ID Negative Test 8",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "03b1264f-2b54-477c-8fa3-1e9a347b3276",
						"exec": [
							"let thisAuthorID =  pm.iterationData.get(\"TestID\");",
							"",
							"console.log(\"thisAuthorID 1  is :\", thisAuthorID);",
							"",
							"let MaxAuthor = pm.environment.get(\"MaxAuthor\");",
							"",
							"    if (thisAuthorID > MaxAuthor)",
							"    {",
							"        thisAuthorID = MaxAuthor;",
							"    }",
							"    ",
							"",
							"console.log(\"thisAuthorID is :\", thisAuthorID);",
							"",
							"    let Cur_AuthorArray = pm.environment.get(\"AuthorDetailArray\");",
							"    ",
							"   // console.log(\"Cur_AuthorArray is :\", JSON.stringify(Cur_AuthorArray));",
							"    ",
							"    let AuthorIDbeingSent = Cur_AuthorArray[thisAuthorID];",
							"",
							"    // console.log(\"AuthorIDbeingSent is :\", JSON.stringify(AuthorIDbeingSent));",
							"    ",
							"    pm.environment.set(\"AuthorIDBeingSentisNOW\",AuthorIDbeingSent.Id );",
							"",
							"    ",
							"    "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "407d775f-9332-48b8-a05a-69dcb66d0e3d",
						"exec": [
							"",
							"pm.test(\"Status code is 405\", function() {",
							"    pm.response.to.have.status(405);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.clientError;",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "librarian",
							"type": "string"
						},
						{
							"key": "username",
							"value": "librarian",
							"type": "string"
						}
					]
				},
				"method": "COPY",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/author/{{AuthorIDBeingSentisNOW}}?session_id={{CurrentSessionID}}",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"author",
						"{{AuthorIDBeingSentisNOW}}"
					],
					"query": [
						{
							"key": "session_id",
							"value": "{{CurrentSessionID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Author by ID Negative Test 9",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "03b1264f-2b54-477c-8fa3-1e9a347b3276",
						"exec": [
							"let thisAuthorID =  pm.iterationData.get(\"TestID\");",
							"",
							"console.log(\"thisAuthorID 1  is :\", thisAuthorID);",
							"",
							"let MaxAuthor = pm.environment.get(\"MaxAuthor\");",
							"",
							"    if (thisAuthorID > MaxAuthor)",
							"    {",
							"        thisAuthorID = MaxAuthor;",
							"    }",
							"    ",
							"",
							"console.log(\"thisAuthorID is :\", thisAuthorID);",
							"",
							"    let Cur_AuthorArray = pm.environment.get(\"AuthorDetailArray\");",
							"    ",
							"   // console.log(\"Cur_AuthorArray is :\", JSON.stringify(Cur_AuthorArray));",
							"    ",
							"    let AuthorIDbeingSent = Cur_AuthorArray[thisAuthorID];",
							"",
							"    // console.log(\"AuthorIDbeingSent is :\", JSON.stringify(AuthorIDbeingSent));",
							"    ",
							"    pm.environment.set(\"AuthorIDBeingSentisNOW\",AuthorIDbeingSent.Id );",
							"",
							"    ",
							"    "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "407d775f-9332-48b8-a05a-69dcb66d0e3d",
						"exec": [
							"",
							"pm.test(\"Status code is 405\", function() {",
							"    pm.response.to.have.status(405);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.clientError;",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "librarian",
							"type": "string"
						},
						{
							"key": "username",
							"value": "librarian",
							"type": "string"
						}
					]
				},
				"method": "HEAD",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/author/{{AuthorIDBeingSentisNOW}}?session_id={{CurrentSessionID}}",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"author",
						"{{AuthorIDBeingSentisNOW}}"
					],
					"query": [
						{
							"key": "session_id",
							"value": "{{CurrentSessionID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Author by ID Negative Test 10",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "03b1264f-2b54-477c-8fa3-1e9a347b3276",
						"exec": [
							"let thisAuthorID = pm.iterationData.get(\"TestID\");",
							"",
							"console.log(\"thisAuthorID 1  is :\", thisAuthorID);",
							"",
							"let MaxAuthor = pm.environment.get(\"MaxAuthor\");",
							"",
							"    if (thisAuthorID > MaxAuthor)",
							"    {",
							"        thisAuthorID = MaxAuthor;",
							"    }",
							"    ",
							"",
							"console.log(\"thisAuthorID is :\", thisAuthorID);",
							"",
							"    let Cur_AuthorArray = pm.environment.get(\"AuthorDetailArray\");",
							"    ",
							"   // console.log(\"Cur_AuthorArray is :\", JSON.stringify(Cur_AuthorArray));",
							"    ",
							"    let AuthorIDbeingSent = Cur_AuthorArray[thisAuthorID];",
							"",
							"    // console.log(\"AuthorIDbeingSent is :\", JSON.stringify(AuthorIDbeingSent));",
							"    ",
							"    pm.environment.set(\"AuthorIDBeingSentisNOW\",AuthorIDbeingSent.Id );",
							"",
							"    ",
							"    "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "407d775f-9332-48b8-a05a-69dcb66d0e3d",
						"exec": [
							"",
							"pm.test(\"Status code is 405\", function() {",
							"    pm.response.to.have.status(405);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.clientError;",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "librarian",
							"type": "string"
						},
						{
							"key": "username",
							"value": "librarian",
							"type": "string"
						}
					]
				},
				"method": "OPTIONS",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/author/{{AuthorIDBeingSentisNOW}}?session_id={{CurrentSessionID}}",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"author",
						"{{AuthorIDBeingSentisNOW}}"
					],
					"query": [
						{
							"key": "session_id",
							"value": "{{CurrentSessionID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Author by ID Negative Test 11",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "03b1264f-2b54-477c-8fa3-1e9a347b3276",
						"exec": [
							"let thisAuthorID = pm.iterationData.get(\"TestID\");",
							"",
							"console.log(\"thisAuthorID 1  is :\", thisAuthorID);",
							"",
							"let MaxAuthor = pm.environment.get(\"MaxAuthor\");",
							"",
							"    if (thisAuthorID > MaxAuthor)",
							"    {",
							"        thisAuthorID = MaxAuthor;",
							"    }",
							"    ",
							"",
							"console.log(\"thisAuthorID is :\", thisAuthorID);",
							"",
							"    let Cur_AuthorArray = pm.environment.get(\"AuthorDetailArray\");",
							"    ",
							"   // console.log(\"Cur_AuthorArray is :\", JSON.stringify(Cur_AuthorArray));",
							"    ",
							"    let AuthorIDbeingSent = Cur_AuthorArray[thisAuthorID];",
							"",
							"    // console.log(\"AuthorIDbeingSent is :\", JSON.stringify(AuthorIDbeingSent));",
							"    ",
							"    pm.environment.set(\"AuthorIDBeingSentisNOW\",AuthorIDbeingSent.Id );",
							"",
							"    ",
							"    "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "407d775f-9332-48b8-a05a-69dcb66d0e3d",
						"exec": [
							"",
							"pm.test(\"Status code is 405\", function() {",
							"    pm.response.to.have.status(405);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.clientError;",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "librarian",
							"type": "string"
						},
						{
							"key": "username",
							"value": "librarian",
							"type": "string"
						}
					]
				},
				"method": "LINK",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/author/{{AuthorIDBeingSentisNOW}}?session_id={{CurrentSessionID}}",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"author",
						"{{AuthorIDBeingSentisNOW}}"
					],
					"query": [
						{
							"key": "session_id",
							"value": "{{CurrentSessionID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Author by ID Negative Test 12",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "03b1264f-2b54-477c-8fa3-1e9a347b3276",
						"exec": [
							"let thisAuthorID = pm.iterationData.get(\"TestID\");",
							"",
							"console.log(\"thisAuthorID 1  is :\", thisAuthorID);",
							"",
							"let MaxAuthor = pm.environment.get(\"MaxAuthor\");",
							"",
							"    if (thisAuthorID > MaxAuthor)",
							"    {",
							"        thisAuthorID = MaxAuthor;",
							"    }",
							"    ",
							"",
							"console.log(\"thisAuthorID is :\", thisAuthorID);",
							"",
							"    let Cur_AuthorArray = pm.environment.get(\"AuthorDetailArray\");",
							"    ",
							"   // console.log(\"Cur_AuthorArray is :\", JSON.stringify(Cur_AuthorArray));",
							"    ",
							"    let AuthorIDbeingSent = Cur_AuthorArray[thisAuthorID];",
							"",
							"    // console.log(\"AuthorIDbeingSent is :\", JSON.stringify(AuthorIDbeingSent));",
							"    ",
							"    pm.environment.set(\"AuthorIDBeingSentisNOW\",AuthorIDbeingSent.Id );",
							"",
							"    ",
							"    "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "407d775f-9332-48b8-a05a-69dcb66d0e3d",
						"exec": [
							"",
							"pm.test(\"Status code is 405\", function() {",
							"    pm.response.to.have.status(405);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.clientError;",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "librarian",
							"type": "string"
						},
						{
							"key": "username",
							"value": "librarian",
							"type": "string"
						}
					]
				},
				"method": "UNLINK",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/author/{{AuthorIDBeingSentisNOW}}?session_id={{CurrentSessionID}}",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"author",
						"{{AuthorIDBeingSentisNOW}}"
					],
					"query": [
						{
							"key": "session_id",
							"value": "{{CurrentSessionID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Author by ID Negative Test 13",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "03b1264f-2b54-477c-8fa3-1e9a347b3276",
						"exec": [
							"let thisAuthorID = pm.iterationData.get(\"TestID\");",
							"",
							"console.log(\"thisAuthorID 1  is :\", thisAuthorID);",
							"",
							"let MaxAuthor = pm.environment.get(\"MaxAuthor\");",
							"",
							"    if (thisAuthorID > MaxAuthor)",
							"    {",
							"        thisAuthorID = MaxAuthor;",
							"    }",
							"    ",
							"",
							"console.log(\"thisAuthorID is :\", thisAuthorID);",
							"",
							"    let Cur_AuthorArray = pm.environment.get(\"AuthorDetailArray\");",
							"    ",
							"   // console.log(\"Cur_AuthorArray is :\", JSON.stringify(Cur_AuthorArray));",
							"    ",
							"    let AuthorIDbeingSent = Cur_AuthorArray[thisAuthorID];",
							"",
							"    // console.log(\"AuthorIDbeingSent is :\", JSON.stringify(AuthorIDbeingSent));",
							"    ",
							"    pm.environment.set(\"AuthorIDBeingSentisNOW\",AuthorIDbeingSent.Id );",
							"",
							"    ",
							"    "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "407d775f-9332-48b8-a05a-69dcb66d0e3d",
						"exec": [
							"",
							"pm.test(\"Status code is 405\", function() {",
							"    pm.response.to.have.status(405);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.clientError;",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "librarian",
							"type": "string"
						},
						{
							"key": "username",
							"value": "librarian",
							"type": "string"
						}
					]
				},
				"method": "PURGE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/author/{{AuthorIDBeingSentisNOW}}?session_id={{CurrentSessionID}}",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"author",
						"{{AuthorIDBeingSentisNOW}}"
					],
					"query": [
						{
							"key": "session_id",
							"value": "{{CurrentSessionID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Author by ID Negative Test 14",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "03b1264f-2b54-477c-8fa3-1e9a347b3276",
						"exec": [
							"let thisAuthorID = pm.iterationData.get(\"TestID\");",
							"",
							"console.log(\"thisAuthorID 1  is :\", thisAuthorID);",
							"",
							"let MaxAuthor = pm.environment.get(\"MaxAuthor\");",
							"",
							"    if (thisAuthorID > MaxAuthor)",
							"    {",
							"        thisAuthorID = MaxAuthor;",
							"    }",
							"    ",
							"",
							"console.log(\"thisAuthorID is :\", thisAuthorID);",
							"",
							"    let Cur_AuthorArray = pm.environment.get(\"AuthorDetailArray\");",
							"    ",
							"   // console.log(\"Cur_AuthorArray is :\", JSON.stringify(Cur_AuthorArray));",
							"    ",
							"    let AuthorIDbeingSent = Cur_AuthorArray[thisAuthorID];",
							"",
							"    // console.log(\"AuthorIDbeingSent is :\", JSON.stringify(AuthorIDbeingSent));",
							"    ",
							"    pm.environment.set(\"AuthorIDBeingSentisNOW\",AuthorIDbeingSent.Id );",
							"",
							"    ",
							"    "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "407d775f-9332-48b8-a05a-69dcb66d0e3d",
						"exec": [
							"",
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.badRequest;",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "librari",
							"type": "string"
						},
						{
							"key": "password",
							"value": "librari",
							"type": "string"
						}
					]
				},
				"method": "LOCK",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/author/{{AuthorIDBeingSentisNOW}}?session_id={{CurrentSessionID}}",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"author",
						"{{AuthorIDBeingSentisNOW}}"
					],
					"query": [
						{
							"key": "session_id",
							"value": "{{CurrentSessionID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Author by ID Negative Test 15",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "03b1264f-2b54-477c-8fa3-1e9a347b3276",
						"exec": [
							"let thisAuthorID = pm.iterationData.get(\"TestID\");",
							"",
							"console.log(\"thisAuthorID 1  is :\", thisAuthorID);",
							"",
							"let MaxAuthor = pm.environment.get(\"MaxAuthor\");",
							"",
							"    if (thisAuthorID > MaxAuthor)",
							"    {",
							"        thisAuthorID = MaxAuthor;",
							"    }",
							"    ",
							"",
							"console.log(\"thisAuthorID is :\", thisAuthorID);",
							"",
							"    let Cur_AuthorArray = pm.environment.get(\"AuthorDetailArray\");",
							"    ",
							"   // console.log(\"Cur_AuthorArray is :\", JSON.stringify(Cur_AuthorArray));",
							"    ",
							"    let AuthorIDbeingSent = Cur_AuthorArray[thisAuthorID];",
							"",
							"    // console.log(\"AuthorIDbeingSent is :\", JSON.stringify(AuthorIDbeingSent));",
							"    ",
							"    pm.environment.set(\"AuthorIDBeingSentisNOW\",AuthorIDbeingSent.Id );",
							"",
							"    ",
							"    "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "407d775f-9332-48b8-a05a-69dcb66d0e3d",
						"exec": [
							"",
							"pm.test(\"Status code is 405\", function() {",
							"    pm.response.to.have.status(405);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.clientError;",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "librarian",
							"type": "string"
						},
						{
							"key": "username",
							"value": "librarian",
							"type": "string"
						}
					]
				},
				"method": "UNLOCK",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/author/{{AuthorIDBeingSentisNOW}}?session_id={{CurrentSessionID}}",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"author",
						"{{AuthorIDBeingSentisNOW}}"
					],
					"query": [
						{
							"key": "session_id",
							"value": "{{CurrentSessionID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Author by ID Negative Test 16",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "03b1264f-2b54-477c-8fa3-1e9a347b3276",
						"exec": [
							"let thisAuthorID = pm.iterationData.get(\"TestID\");",
							"",
							"console.log(\"thisAuthorID 1  is :\", thisAuthorID);",
							"",
							"let MaxAuthor = pm.environment.get(\"MaxAuthor\");",
							"",
							"    if (thisAuthorID > MaxAuthor)",
							"    {",
							"        thisAuthorID = MaxAuthor;",
							"    }",
							"    ",
							"",
							"console.log(\"thisAuthorID is :\", thisAuthorID);",
							"",
							"    let Cur_AuthorArray = pm.environment.get(\"AuthorDetailArray\");",
							"    ",
							"   // console.log(\"Cur_AuthorArray is :\", JSON.stringify(Cur_AuthorArray));",
							"    ",
							"    let AuthorIDbeingSent = Cur_AuthorArray[thisAuthorID];",
							"",
							"    // console.log(\"AuthorIDbeingSent is :\", JSON.stringify(AuthorIDbeingSent));",
							"    ",
							"    pm.environment.set(\"AuthorIDBeingSentisNOW\",AuthorIDbeingSent.Id );",
							"",
							"    ",
							"    "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "407d775f-9332-48b8-a05a-69dcb66d0e3d",
						"exec": [
							"",
							"pm.test(\"Status code is 405\", function() {",
							"    pm.response.to.have.status(405);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.clientError;",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "librarian",
							"type": "string"
						},
						{
							"key": "username",
							"value": "librarian",
							"type": "string"
						}
					]
				},
				"method": "PROPFIND",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/author/{{AuthorIDBeingSentisNOW}}?session_id={{CurrentSessionID}}",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"author",
						"{{AuthorIDBeingSentisNOW}}"
					],
					"query": [
						{
							"key": "session_id",
							"value": "{{CurrentSessionID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Author by ID Negative Test 17",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "03b1264f-2b54-477c-8fa3-1e9a347b3276",
						"exec": [
							"let thisAuthorID = pm.iterationData.get(\"TestID\");",
							"",
							"console.log(\"thisAuthorID 1  is :\", thisAuthorID);",
							"",
							"let MaxAuthor = pm.environment.get(\"MaxAuthor\");",
							"",
							"    if (thisAuthorID > MaxAuthor)",
							"    {",
							"        thisAuthorID = MaxAuthor;",
							"    }",
							"    ",
							"",
							"console.log(\"thisAuthorID is :\", thisAuthorID);",
							"",
							"    let Cur_AuthorArray = pm.environment.get(\"AuthorDetailArray\");",
							"    ",
							"   // console.log(\"Cur_AuthorArray is :\", JSON.stringify(Cur_AuthorArray));",
							"    ",
							"    let AuthorIDbeingSent = Cur_AuthorArray[thisAuthorID];",
							"",
							"    // console.log(\"AuthorIDbeingSent is :\", JSON.stringify(AuthorIDbeingSent));",
							"    ",
							"    pm.environment.set(\"AuthorIDBeingSentisNOW\",AuthorIDbeingSent.Id );",
							"",
							"    ",
							"    "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "407d775f-9332-48b8-a05a-69dcb66d0e3d",
						"exec": [
							"",
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.badRequest;",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "librar",
							"type": "string"
						},
						{
							"key": "username",
							"value": "librar",
							"type": "string"
						}
					]
				},
				"method": "VIEW",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/author/{{AuthorIDBeingSentisNOW}}?session_id={{CurrentSessionID}}",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"author",
						"{{AuthorIDBeingSentisNOW}}"
					],
					"query": [
						{
							"key": "session_id",
							"value": "{{CurrentSessionID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Author Negative Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7f2489fa-d3db-4604-a689-43311342a864",
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.badRequest;",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/author?session_id=123",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"author"
					],
					"query": [
						{
							"key": "session_id",
							"value": "123"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Author Negative Test 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7f2489fa-d3db-4604-a689-43311342a864",
						"exec": [
							"pm.test(\"Status code is 405\", function() {",
							"    pm.response.to.have.status(405);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.clientError;",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "librarian",
							"type": "string"
						},
						{
							"key": "username",
							"value": "librarian",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/author?session_id={{CurrentSessionID}}",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"author"
					],
					"query": [
						{
							"key": "session_id",
							"value": "{{CurrentSessionID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Author Negative Test 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7f2489fa-d3db-4604-a689-43311342a864",
						"exec": [
							"pm.test(\"Status code is 405\", function() {",
							"    pm.response.to.have.status(405);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.clientError;",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "librarian",
							"type": "string"
						},
						{
							"key": "username",
							"value": "librarian",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/author?session_id={{CurrentSessionID}}",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"author"
					],
					"query": [
						{
							"key": "session_id",
							"value": "{{CurrentSessionID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Author Negative Test 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7f2489fa-d3db-4604-a689-43311342a864",
						"exec": [
							"pm.test(\"Status code is 405\", function() {",
							"    pm.response.to.have.status(405);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.clientError;",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "librarian",
							"type": "string"
						},
						{
							"key": "username",
							"value": "librarian",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/author?session_id={{CurrentSessionID}}",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"author"
					],
					"query": [
						{
							"key": "session_id",
							"value": "{{CurrentSessionID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Author Negative Test 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7f2489fa-d3db-4604-a689-43311342a864",
						"exec": [
							"pm.test(\"Status code is 405\", function() {",
							"    pm.response.to.have.status(405);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.clientError;",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "librarian",
							"type": "string"
						},
						{
							"key": "username",
							"value": "librarian",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/author?session_id={{CurrentSessionID}}",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"author"
					],
					"query": [
						{
							"key": "session_id",
							"value": "{{CurrentSessionID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Author Negative Test 6",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7f2489fa-d3db-4604-a689-43311342a864",
						"exec": [
							"pm.test(\"Status code is 405\", function() {",
							"    pm.response.to.have.status(405);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.clientError;",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "librarian",
							"type": "string"
						},
						{
							"key": "username",
							"value": "librarian",
							"type": "string"
						}
					]
				},
				"method": "OPTIONS",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/author?session_id={{CurrentSessionID}}",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"author"
					],
					"query": [
						{
							"key": "session_id",
							"value": "{{CurrentSessionID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Author Negative Test 7",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7f2489fa-d3db-4604-a689-43311342a864",
						"exec": [
							"pm.test(\"Status code is 405\", function() {",
							"    pm.response.to.have.status(405);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.clientError;",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "librarian",
							"type": "string"
						},
						{
							"key": "username",
							"value": "librarian",
							"type": "string"
						}
					]
				},
				"method": "HEAD",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/author?session_id={{CurrentSessionID}}",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"author"
					],
					"query": [
						{
							"key": "session_id",
							"value": "{{CurrentSessionID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Author Negative Test 8",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7f2489fa-d3db-4604-a689-43311342a864",
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.badRequest;",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "OPTIONS",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/author?session_id={{CurrentSessionID}}",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"author"
					],
					"query": [
						{
							"key": "session_id",
							"value": "{{CurrentSessionID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Author Negative Test 9",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7f2489fa-d3db-4604-a689-43311342a864",
						"exec": [
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.be.error;",
							"    pm.response.to.be.badRequest;",
							"});",
							"",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/author?session_id=12f91882-575b-4843-8a2f-7a35836ba3be",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"author"
					],
					"query": [
						{
							"key": "session_id",
							"value": "12f91882-575b-4843-8a2f-7a35836ba3be"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetAuthor Negative Test 30",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7f2489fa-d3db-4604-a689-43311342a864",
						"exec": [
							"var AuthorListSchema = {",
							"    \"ErrorMessage\": ",
							"      {",
							"          \"Name\": \"string\",",
							"      }",
							"      ",
							"};",
							"",
							"let ErrorResp = pm.response.json();",
							"",
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.be.badRequest;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"pm.test('Schema is valid', function() {",
							"  pm.expect(tv4.validate(ErrorResp, AuthorListSchema)).to.be.true;",
							"",
							"});",
							"",
							"",
							"pm.test('Error message for no session id is correct', function() {",
							"   ",
							"   pm.expect(ErrorResp).to.eql(pm.environment.get(\"EmptySessionErrMsg\"));",
							"    ",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "librarian",
							"type": "string"
						},
						{
							"key": "username",
							"value": "librarian",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://www.libraryinformationsystem.org/Services/RestService.svc/author",
					"protocol": "http",
					"host": [
						"www",
						"libraryinformationsystem",
						"org"
					],
					"path": [
						"Services",
						"RestService.svc",
						"author"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "a02d7c5a-2e9f-4f72-96a7-cea3359cb89a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "0cde6f9d-6baf-4d83-801d-92d54f792f76",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}